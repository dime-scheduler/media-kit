{"version":3,"sources":["data/footer.js","components/Layout/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["col1","title","link","col2","Topbar","React","lazy","CustomDot","Fragment","icon","className","Layout","fallback","id","hasDarkTopBar","this","props","children","isLight","ContainerClassName","style","height","width","TransitionClassName","Component","withRouter","routes","path","component","isWithoutLayout","exact","App","Loader","map","route","idx","WrappedComponent","isTopbarDark","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ReactGA","initialize","pageview","pathname"],"mappings":"8SAEMA,EAAO,CACT,CAAEC,MAAO,iBAAkBC,KAAM,6BACjC,CAAED,MAAO,OAAQC,KAAM,kCACvB,CAAED,MAAO,QAASC,KAAM,oCAGtBC,EAAO,CACT,CAAEF,MAAO,wBAAyBC,KAAM,6CACxC,CAAED,MAAO,aAAcC,KAAM,4C,OCH3BE,EAASC,IAAMC,MAAK,kBAAM,sDAE1BC,EAAY,WAChB,OACE,cAAC,IAAMC,SAAP,UACE,cAAC,IAAD,CAAaC,KAAK,WAAWC,UAAU,aAkBvCC,E,4JACJ,WACE,OACE,cAAC,IAAMH,SAAP,UACE,eAAC,WAAD,CAAUI,SAfd,qBAAKC,GAAG,YAAR,SACE,qBAAKA,GAAG,SAAR,SACE,sBAAKH,UAAU,UAAf,UACE,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,0BAWjB,UACE,cAACN,EAAD,CAAQU,cAAeC,KAAKC,MAAMF,gBAEjCC,KAAKC,MAAMC,SAEZ,cAAC,SAAD,CAAQC,SAAS,EAAMlB,KAAMA,EAAMG,KAAMA,IAEzC,cAAC,IAAD,CACEgB,mBAAmB,oBACnBC,MAAO,CAAEC,OAAQ,GAAIC,MAAO,IAC5BC,oBAAoB,qBAHtB,SAKE,cAAC,EAAD,e,GAhBSC,aAwBNC,cAAWd,G,QC1CXe,G,kBALA,CAEb,CAAEC,KAAM,IAAKC,UANYvB,IAAMC,MAAK,kBACpC,6DAK4CuB,iBAAiB,EAAOC,OAAO,K,ICsBvEC,E,4MACJC,OAAS,WACP,OACE,qBAAKnB,GAAG,YAAR,SACE,qBAAKA,GAAG,SAAR,SACE,sBAAKH,UAAU,UAAf,UACE,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,2B,4CAMzB,WACE,OACE,cAAC,IAAMF,SAAP,UACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUI,SAAUG,KAAKiB,SAAzB,SACE,cAAC,IAAD,UACGN,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACVD,EAAML,gBACJ,cAAC,IAAD,CACEF,KAAMO,EAAMP,KACZG,MAAOI,EAAMJ,MACbF,UAAWM,EAAMN,WACZO,GAGP,cAAC,IAAD,CACER,KAAMO,EAAMP,KACZG,OAAK,EACLF,WA5CAQ,EA4CsBF,EAAMN,UA5CVd,EA4CqBoB,EAAMG,aA1C/D,4JACE,WACE,OACE,cAAC,EAAD,CAAQvB,cAAeA,EAAvB,SACE,cAACsB,EAAD,UAJR,GAAqB/B,IAAMmB,aA2CJW,GA7CzB,IAAoBC,EAAkBtB,iB,GAapBU,aA4CHC,cAAWM,GC/DNO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXAC,EACJ,cAAC,IAAD,UACE,cAAC,EAAD,MAIJC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDoHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBCpHnBC,IAAQC,WAAW,kBACnBD,IAAQE,SAASjB,OAAOC,SAASiB,Y","file":"static/js/main.1a63541b.chunk.js","sourcesContent":["\r\n\r\nconst col1 = [\r\n    { title: \"Dime.Scheduler\", link: \"https://dimescheduler.com\" },\r\n    { title: \"Docs\", link: \"https://docs.dimescheduler.com\" },\r\n    { title: \"Intro\", link: \"https://intro.dimescheduler.com\" }\r\n];\r\n\r\nconst col2 = [\r\n    { title: \"Follow us on LinkedIn\", link: \"https://www.linkedin.com/company/dimenics\" },\r\n    { title: \"DimenicsTV\", link: \"https://www.youtube.com/user/DimenicsTV\" }\r\n];\r\n\r\nexport {\r\n    col1,\r\n    col2\r\n};","import React, { Component, Suspense } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ScrollUpButton from \"react-scroll-up-button\";\r\nimport FeatherIcon from \"feather-icons-react\";\r\nimport { Footer } from \"@dimescheduler/ds-website-layout\";\r\nimport { col1, col2 } from \"../../data/footer\";\r\n\r\nconst Topbar = React.lazy(() => import(\"./Topbar\"));\r\n\r\nconst CustomDot = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <FeatherIcon icon=\"arrow-up\" className=\"icons\" />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div id=\"preloader\">\r\n      <div id=\"status\">\r\n        <div className=\"spinner\">\r\n          <div className=\"double-bounce1\"></div>\r\n          <div className=\"double-bounce2\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nclass Layout extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Suspense fallback={Loader()}>\r\n          <Topbar hasDarkTopBar={this.props.hasDarkTopBar} />\r\n\r\n          {this.props.children}\r\n\r\n          <Footer isLight={true} col1={col1} col2={col2} />\r\n\r\n          <ScrollUpButton\r\n            ContainerClassName=\"classForContainer\"\r\n            style={{ height: 36, width: 36 }}\r\n            TransitionClassName=\"classForTransition\"\r\n          >\r\n            <CustomDot />\r\n          </ScrollUpButton>\r\n        </Suspense>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Layout);\r\n","import React from \"react\";\r\n\r\n//Help Center\r\nconst HelpCenterOverview = React.lazy(() =>\r\n  import(\"./pages/index\")\r\n);\r\n\r\nconst routes = [\r\n\r\n  { path: \"/\", component: HelpCenterOverview, isWithoutLayout: false, exact: true }\r\n];\r\n\r\nexport default routes;\r\n","import React, { Component, Suspense } from \"react\";\r\nimport Layout from \"./components/Layout/\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  BrowserRouter as Router,\r\n  withRouter,\r\n} from \"react-router-dom\";\r\n\r\n// Import Css\r\nimport \"./assets/css/materialdesignicons.min.css\";\r\nimport \"./Apps.scss\";\r\n\r\nimport \"./assets/css/colors/default.css\";\r\n\r\n// Include Routes\r\nimport routes from \"./routes\";\r\n\r\nfunction withLayout(WrappedComponent, hasDarkTopBar) {\r\n  // ...and returns another component...\r\n  return class extends React.Component {\r\n    render() {\r\n      return (\r\n        <Layout hasDarkTopBar={hasDarkTopBar}>\r\n          <WrappedComponent></WrappedComponent>\r\n        </Layout>\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nclass App extends Component {\r\n  Loader = () => {\r\n    return (\r\n      <div id=\"preloader\">\r\n        <div id=\"status\">\r\n          <div className=\"spinner\">\r\n            <div className=\"double-bounce1\"></div>\r\n            <div className=\"double-bounce2\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Router>\r\n          <Suspense fallback={this.Loader()}>\r\n            <Switch>\r\n              {routes.map((route, idx) =>\r\n                route.isWithoutLayout ? (\r\n                  <Route\r\n                    path={route.path}\r\n                    exact={route.exact}\r\n                    component={route.component}\r\n                    key={idx}\r\n                  />\r\n                ) : (\r\n                  <Route\r\n                    path={route.path}\r\n                    exact\r\n                    component={withLayout(route.component, route.isTopbarDark)}\r\n                    key={idx}\r\n                  />\r\n                )\r\n              )}\r\n            </Switch>\r\n          </Suspense>\r\n        </Router>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport ReactGA from \"react-ga\";\r\n\r\nconst app = (\r\n  <BrowserRouter>  \r\n    <App />\r\n  </BrowserRouter>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\nReactGA.initialize(\"UA-181274754-2\");\r\nReactGA.pageview(window.location.pathname);\r\n"],"sourceRoot":""}