{"version":3,"sources":["components/Layout/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Topbar","React","lazy","Footer","CustomDot","Fragment","icon","className","Layout","fallback","id","hasDarkTopBar","this","props","children","isLight","ContainerClassName","style","height","width","TransitionClassName","Component","withRouter","routes","path","component","isWithoutLayout","exact","App","Loader","map","route","idx","WrappedComponent","isTopbarDark","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ReactGA","initialize","pageview","pathname"],"mappings":"6SAKMA,EAASC,IAAMC,MAAK,kBAAM,sDAC1BC,EAASF,IAAMC,MAAK,kBAAM,gCAE1BE,EAAY,WAChB,OACE,cAAC,IAAMC,SAAP,UACE,cAAC,IAAD,CAAaC,KAAK,WAAWC,UAAU,aAiBvCC,E,4JACJ,WACE,OACE,cAAC,IAAMH,SAAP,UACE,eAAC,WAAD,CAAUI,SAdd,qBAAKC,GAAG,YAAR,SACE,qBAAKA,GAAG,SAAR,SACE,sBAAKH,UAAU,UAAf,UACE,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,0BAUjB,UACE,cAACP,EAAD,CAAQW,cAAeC,KAAKC,MAAMF,gBAEjCC,KAAKC,MAAMC,SACZ,cAACX,EAAD,CAAQY,SAAS,IAEjB,cAAC,IAAD,CACEC,mBAAmB,oBACnBC,MAAO,CAAEC,OAAQ,GAAIC,MAAO,IAC5BC,oBAAoB,qBAHtB,SAKE,cAAC,EAAD,e,GAfSC,aAuBNC,cAAWd,G,QCvCXe,G,kBALA,CAEb,CAAEC,KAAM,IAAKC,UANYxB,IAAMC,MAAK,kBACpC,6DAK4CwB,iBAAiB,EAAOC,OAAO,K,ICsBvEC,E,4MACJC,OAAS,WACP,OACE,qBAAKnB,GAAG,YAAR,SACE,qBAAKA,GAAG,SAAR,SACE,sBAAKH,UAAU,UAAf,UACE,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,2B,4CAMzB,WACE,OACE,cAAC,IAAMF,SAAP,UACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUI,SAAUG,KAAKiB,SAAzB,SACE,cAAC,IAAD,UACGN,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACVD,EAAML,gBACJ,cAAC,IAAD,CACEF,KAAMO,EAAMP,KACZG,MAAOI,EAAMJ,MACbF,UAAWM,EAAMN,WACZO,GAGP,cAAC,IAAD,CACER,KAAMO,EAAMP,KACZG,OAAK,EACLF,WA5CAQ,EA4CsBF,EAAMN,UA5CVd,EA4CqBoB,EAAMG,aA1C/D,4JACE,WACE,OACE,cAAC,EAAD,CAAQvB,cAAeA,EAAvB,SACE,cAACsB,EAAD,UAJR,GAAqBhC,IAAMoB,aA2CJW,GA7CzB,IAAoBC,EAAkBtB,iB,GAapBU,aA4CHC,cAAWM,GC/DNO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXAC,EACJ,cAAC,IAAD,UACE,cAAC,EAAD,MAIJC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDoHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBCpHnBC,IAAQC,WAAW,kBACnBD,IAAQE,SAASjB,OAAOC,SAASiB,Y","file":"static/js/main.4abfec6d.chunk.js","sourcesContent":["import React, { Component, Suspense } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport FeatherIcon from \"feather-icons-react\";\n\nconst Topbar = React.lazy(() => import(\"./Topbar\"));\nconst Footer = React.lazy(() => import(\"./Footer\"));\n\nconst CustomDot = () => {\n  return (\n    <React.Fragment>\n      <FeatherIcon icon=\"arrow-up\" className=\"icons\" />\n    </React.Fragment>\n  );\n};\n\nconst Loader = () => {\n  return (\n    <div id=\"preloader\">\n      <div id=\"status\">\n        <div className=\"spinner\">\n          <div className=\"double-bounce1\"></div>\n          <div className=\"double-bounce2\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\nclass Layout extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Suspense fallback={Loader()}>\n          <Topbar hasDarkTopBar={this.props.hasDarkTopBar} />\n\n          {this.props.children}\n          <Footer isLight={true} />\n\n          <ScrollUpButton\n            ContainerClassName=\"classForContainer\"\n            style={{ height: 36, width: 36 }}\n            TransitionClassName=\"classForTransition\"\n          >\n            <CustomDot />\n          </ScrollUpButton>\n        </Suspense>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(Layout);\n","import React from \"react\";\r\n\r\n//Help Center\r\nconst HelpCenterOverview = React.lazy(() =>\r\n  import(\"./pages/index\")\r\n);\r\n\r\nconst routes = [\r\n\r\n  { path: \"/\", component: HelpCenterOverview, isWithoutLayout: false, exact: true }\r\n];\r\n\r\nexport default routes;\r\n","import React, { Component, Suspense } from \"react\";\nimport Layout from \"./components/Layout/\";\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n  withRouter,\n} from \"react-router-dom\";\n\n// Import Css\nimport \"./assets/css/materialdesignicons.min.css\";\nimport \"./Apps.scss\";\n\nimport \"./assets/css/colors/default.css\";\n\n// Include Routes\nimport routes from \"./routes\";\n\nfunction withLayout(WrappedComponent, hasDarkTopBar) {\n  // ...and returns another component...\n  return class extends React.Component {\n    render() {\n      return (\n        <Layout hasDarkTopBar={hasDarkTopBar}>\n          <WrappedComponent></WrappedComponent>\n        </Layout>\n      );\n    }\n  };\n}\n\nclass App extends Component {\n  Loader = () => {\n    return (\n      <div id=\"preloader\">\n        <div id=\"status\">\n          <div className=\"spinner\">\n            <div className=\"double-bounce1\"></div>\n            <div className=\"double-bounce2\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Router>\n          <Suspense fallback={this.Loader()}>\n            <Switch>\n              {routes.map((route, idx) =>\n                route.isWithoutLayout ? (\n                  <Route\n                    path={route.path}\n                    exact={route.exact}\n                    component={route.component}\n                    key={idx}\n                  />\n                ) : (\n                  <Route\n                    path={route.path}\n                    exact\n                    component={withLayout(route.component, route.isTopbarDark)}\n                    key={idx}\n                  />\n                )\n              )}\n            </Switch>\n          </Suspense>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactGA from \"react-ga\";\n\nconst app = (\n  <BrowserRouter>  \n    <App />\n  </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\nserviceWorker.unregister();\nReactGA.initialize(\"UA-181274754-2\");\nReactGA.pageview(window.location.pathname);\n"],"sourceRoot":""}